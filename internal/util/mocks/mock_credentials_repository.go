// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/credentials/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/upassed/upassed-authentication-service/internal/repository/model"
)

// CredentialsRepository is a mock of Repository interface.
type CredentialsRepository struct {
	ctrl     *gomock.Controller
	recorder *CredentialsRepositoryMockRecorder
}

// CredentialsRepositoryMockRecorder is the mock recorder for CredentialsRepository.
type CredentialsRepositoryMockRecorder struct {
	mock *CredentialsRepository
}

// NewCredentialsRepository creates a new mock instance.
func NewCredentialsRepository(ctrl *gomock.Controller) *CredentialsRepository {
	mock := &CredentialsRepository{ctrl: ctrl}
	mock.recorder = &CredentialsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CredentialsRepository) EXPECT() *CredentialsRepositoryMockRecorder {
	return m.recorder
}

// CheckDuplicatesExists mocks base method.
func (m *CredentialsRepository) CheckDuplicatesExists(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicatesExists", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicatesExists indicates an expected call of CheckDuplicatesExists.
func (mr *CredentialsRepositoryMockRecorder) CheckDuplicatesExists(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicatesExists", reflect.TypeOf((*CredentialsRepository)(nil).CheckDuplicatesExists), ctx, username)
}

// FindByUsername mocks base method.
func (m *CredentialsRepository) FindByUsername(ctx context.Context, username string) (*domain.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", ctx, username)
	ret0, _ := ret[0].(*domain.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *CredentialsRepositoryMockRecorder) FindByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*CredentialsRepository)(nil).FindByUsername), ctx, username)
}

// Save mocks base method.
func (m *CredentialsRepository) Save(arg0 context.Context, arg1 *domain.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *CredentialsRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*CredentialsRepository)(nil).Save), arg0, arg1)
}
