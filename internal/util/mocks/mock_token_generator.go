// Code generated by MockGen. DO NOT EDIT.
// Source: internal/jwt/jwt.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/upassed/upassed-authentication-service/internal/jwt"
)

// TokenGenerator is a mock of TokenGenerator interface.
type TokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *TokenGeneratorMockRecorder
}

// TokenGeneratorMockRecorder is the mock recorder for TokenGenerator.
type TokenGeneratorMockRecorder struct {
	mock *TokenGenerator
}

// NewTokenGenerator creates a new mock instance.
func NewTokenGenerator(ctrl *gomock.Controller) *TokenGenerator {
	mock := &TokenGenerator{ctrl: ctrl}
	mock.recorder = &TokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TokenGenerator) EXPECT() *TokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateFor mocks base method.
func (m *TokenGenerator) GenerateFor(username string) (*jwt.GeneratedTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFor", username)
	ret0, _ := ret[0].(*jwt.GeneratedTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFor indicates an expected call of GenerateFor.
func (mr *TokenGeneratorMockRecorder) GenerateFor(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFor", reflect.TypeOf((*TokenGenerator)(nil).GenerateFor), username)
}
