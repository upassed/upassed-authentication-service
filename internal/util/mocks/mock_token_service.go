// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/token/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/upassed/upassed-authentication-service/internal/repository/model"
	business "github.com/upassed/upassed-authentication-service/internal/service/model"
)

// TokenService is a mock of Service interface.
type TokenService struct {
	ctrl     *gomock.Controller
	recorder *TokenServiceMockRecorder
}

// TokenServiceMockRecorder is the mock recorder for TokenService.
type TokenServiceMockRecorder struct {
	mock *TokenService
}

// NewTokenService creates a new mock instance.
func NewTokenService(ctrl *gomock.Controller) *TokenService {
	mock := &TokenService{ctrl: ctrl}
	mock.recorder = &TokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TokenService) EXPECT() *TokenServiceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *TokenService) Generate(arg0 context.Context, arg1 *business.TokenGenerateRequest) (*business.TokenGenerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0, arg1)
	ret0, _ := ret[0].(*business.TokenGenerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *TokenServiceMockRecorder) Generate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*TokenService)(nil).Generate), arg0, arg1)
}

// Refresh mocks base method.
func (m *TokenService) Refresh(arg0 context.Context, arg1 *business.TokenRefreshRequest) (*business.TokenRefreshResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0, arg1)
	ret0, _ := ret[0].(*business.TokenRefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *TokenServiceMockRecorder) Refresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*TokenService)(nil).Refresh), arg0, arg1)
}

// Validate mocks base method.
func (m *TokenService) Validate(arg0 context.Context, arg1 *business.TokenValidateRequest) (*business.TokenValidateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(*business.TokenValidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *TokenServiceMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*TokenService)(nil).Validate), arg0, arg1)
}

// unusedCredentialsRepo1 is a mock of credentialsRepository interface.
type unusedCredentialsRepo1 struct {
	ctrl     *gomock.Controller
	recorder *unusedCredentialsRepo1MockRecorder
}

// unusedCredentialsRepo1MockRecorder is the mock recorder for unusedCredentialsRepo1.
type unusedCredentialsRepo1MockRecorder struct {
	mock *unusedCredentialsRepo1
}

// NewunusedCredentialsRepo1 creates a new mock instance.
func NewunusedCredentialsRepo1(ctrl *gomock.Controller) *unusedCredentialsRepo1 {
	mock := &unusedCredentialsRepo1{ctrl: ctrl}
	mock.recorder = &unusedCredentialsRepo1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *unusedCredentialsRepo1) EXPECT() *unusedCredentialsRepo1MockRecorder {
	return m.recorder
}

// FindByUsername mocks base method.
func (m *unusedCredentialsRepo1) FindByUsername(ctx context.Context, username string) (*domain.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", ctx, username)
	ret0, _ := ret[0].(*domain.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *unusedCredentialsRepo1MockRecorder) FindByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*unusedCredentialsRepo1)(nil).FindByUsername), ctx, username)
}
