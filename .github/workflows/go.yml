name: go microservice workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23  # Set the Go version according to your needs

      # Install dependencies
      - name: Install dependencies
        run: go mod tidy

      # Build the project
      - name: Build the project
        run: go build ./...

  test:
    runs-on: ubuntu-latest
    needs: build  # This ensures the test job runs only after the build job completes successfully

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      # Install dependencies
      - name: Install dependencies
        run: go mod tidy

      # Run unit tests
      - name: Run tests
        run: go test -v ./...

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/upassed-authentication-service:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/upassed-authentication-service:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy Docker Container on Remote Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: root
          SERVER_PASSWORD: ${{ secrets.SERVER_ROOT_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
            docker stop upassed-authentication-service || true
            docker rm upassed-authentication-service || true
            docker rmi ${{ secrets.DOCKER_USERNAME }}/upassed-authentication-service:latest || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/upassed-authentication-service:latest

            docker run -d --name upassed-authentication-service --network upassed \
              -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
              -e POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
              -e POSTGRES_DATABASE_NAME=${{ secrets.POSTGRES_DATABASE_NAME }} \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -e GRPC_SERVER_PORT=${{ secrets.GRPC_SERVER_PORT }} \
              -e GRPC_SERVER_TIMEOUT=${{ secrets.GRPC_SERVER_TIMEOUT }} \
              -e MIGRATIONS_PATH=${{ secrets.MIGRATIONS_PATH }} \
              -e MIGRATIONS_TABLE_NAME=${{ secrets.MIGRATIONS_TABLE_NAME }} \
              -e ENDPOINT_EXECUTION_TIMEOUT_MS=${{ secrets.ENDPOINT_EXECUTION_TIMEOUT_MS }} \
              -e JWT_ACCESS_TOKEN_TTL=${{ secrets.JWT_ACCESS_TOKEN_TTL }} \
              -e JWT_REFRESH_TOKEN_TTL=${{ secrets.JWT_REFRESH_TOKEN_TTL }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e JAEGER_HOST=${{ secrets.JAEGER_HOST }} \
              -e JAEGER_PORT=${{ secrets.JAEGER_PORT }} \
              -e CREDENTIALS_TRACER_NAME=${{ secrets.CREDENTIALS_TRACER_NAME }} \
              -e TOKEN_TRACER_NAME=${{ secrets.TOKEN_TRACER_NAME }} \
              -e REDIS_USER=${{ secrets.REDIS_USER }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e REDIS_DATABASE_NUMBER=${{ secrets.REDIS_DATABASE_NUMBER }} \
              -e REDIS_ENTITY_TTL=${{ secrets.REDIS_ENTITY_TTL }} \
              -e RABBIT_USER=${{ secrets.RABBIT_USER }} \
              -e RABBIT_PASSWORD=${{ secrets.RABBIT_PASSWORD }} \
              -e RABBIT_HOST=${{ secrets.RABBIT_HOST }} \
              -e RABBIT_PORT=${{ secrets.RABBIT_PORT }} \
              -e RABBIT_EXCHANGE_NAME=${{ secrets.RABBIT_EXCHANGE_NAME }} \
              -e RABBIT_EXCHANGE_TYPE=${{ secrets.RABBIT_EXCHANGE_TYPE }} \
              -e RABBIT_CREDENTIALS_CREATE_QUEUE_NAME=${{ secrets.RABBIT_CREDENTIALS_CREATE_QUEUE_NAME }} \
              -e RABBIT_CREDENTIALS_CREATE_QUEUE_ROUTING_KEY=${{ secrets.RABBIT_CREDENTIALS_CREATE_QUEUE_ROUTING_KEY }} \
              -p ${{ secrets.GRPC_SERVER_PORT }}:${{ secrets.GRPC_SERVER_PORT }} \
              ${{ secrets.DOCKER_USERNAME }}/upassed-authentication-service:latest
          EOF
